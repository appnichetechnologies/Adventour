"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXataClient = exports.XataClient = void 0;
// Generated by Xata Codegen 0.29.4. Please do not edit.
const client_1 = require("@xata.io/client");
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
const tables = [
  {
    name: "users",
    columns: [
      { name: "UserName", type: "string", unique: true },
      { name: "Email", type: "email", unique: true },
      {
        name: "Password",
        type: "text",
        notNull: true,
        defaultValue: "gdddfffyrgguyuitu23436",
      },
      { name: "Type", type: "string", notNull: true, defaultValue: "User" },
    ],
  },
  {
    name: "destinations",
    columns: [
      { name: "Name", type: "string", unique: true },
      { name: "Country", type: "string", notNull: true, defaultValue: "India" },
      {
        name: "Region",
        type: "string",
        notNull: true,
        defaultValue: "Mumbai, Maharashtra",
      },
      {
        name: "Description",
        type: "text",
        notNull: true,
        defaultValue: "A  place in the mountains",
      },
      {
        name: "Image",
        type: "file[]",
        "file[]": { defaultPublicAccess: true },
      },
    ],
    revLinks: [
      { column: "Destination", table: "accomodations" },
      { column: "Destination", table: "activities" },
      { column: "Destination", table: "packages" },
    ],
  },
  {
    name: "accomodations",
    columns: [
      { name: "Name", type: "string", notNull: true, defaultValue: "X Hotel" },
      { name: "Destination", type: "link", link: { table: "destinations" } },
      {
        name: "Description",
        type: "text",
        notNull: true,
        defaultValue: "5 mins from station",
      },
      {
        name: "PricePerNight",
        type: "float",
        notNull: true,
        defaultValue: "10000.00",
      },
    ],
    revLinks: [{ column: "Accomodations", table: "packages" }],
  },
  {
    name: "packages",
    columns: [
      {
        name: "Name",
        type: "string",
        notNull: true,
        defaultValue: "Monsoon Package",
      },
      {
        name: "Type",
        type: "string",
        notNull: true,
        defaultValue: "Mountains",
      },
      { name: "Destination", type: "link", link: { table: "destinations" } },
      { name: "Activity", type: "link", link: { table: "activities" } },
      { name: "Accomodations", type: "link", link: { table: "accomodations" } },
      {
        name: "StartDate",
        type: "datetime",
        notNull: true,
        defaultValue: "now",
      },
      { name: "EndDate", type: "datetime", notNull: true, defaultValue: "now" },
      { name: "Price", type: "float", notNull: true, defaultValue: "10000.00" },
      {
        name: "Description",
        type: "text",
        notNull: true,
        defaultValue: "xxxxxxx",
      },
    ],
  },
  {
    name: "activities",
    columns: [
      { name: "Name", type: "string" },
      { name: "Destination", type: "link", link: { table: "destinations" } },
      {
        name: "Description",
        type: "text",
        notNull: true,
        defaultValue: "xxxxxx",
      },
    ],
    revLinks: [{ column: "Activity", table: "packages" }],
  },
];
/** @type { import('@xata.io/client').ClientConstructor<{}> } */
const DatabaseClient = (0, client_1.buildClient)();
const defaultOptions = {
  databaseURL:
    "https://appnichetechnologies-s-workspace-bbijnp.us-east-1.xata.sh/db/Adventour",
};
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
class XataClient extends DatabaseClient {
  constructor(options) {
    super({ ...defaultOptions, ...options }, tables);
  }
}
exports.XataClient = XataClient;
let instance = undefined;
/** @type { () => XataClient } */
const getXataClient = () => {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
exports.getXataClient = getXataClient;
